# Makefile generated by ChatGPT with its explanations.
# Target program name
NAME = push_swap 
# creating an executable called push_swap.

# Source files for the project
SRCS = main.c src/push_swap.c src/input_checking.c src/reverse_rotation.c src/stack.c src/radix.c src/rotation.c src/swap.c src/push.c libft/ft_lstclear_bonus.c libft/ft_lstnew_bonus.c libft/ft_lstadd_front_bonus.c libft/ft_lstlast_bonus.c libft/ft_lstdelone_bonus.c src/values_simplifying.c src/digit_only.c src/stack_freeing.c src/sixless_sort.c
# source files (.c) to build the program.

# Object files derived from source files
OBJS = $(SRCS:.c=.o)
# substitutes the c files with o files.

# Path to the libft library directory
LIBFT_DIR = libft/
# directory of the libft project
LIBFT = $(LIBFT_DIR)libft.a
# reference to the compiled file (libft.a)

# Compiler
CC = cc
# Flags 
CFLAGS = -Wall -Wextra -Werror -Iincludes
# enable all warnings (and additional ones) and treat them as errors.

# Default target
all: $(LIBFT)  $(NAME)
	# Default target that builds the executable called push_swap by ensuring that $(NAME) is created

#Build the executable
$(NAME): $(OBJS) $(LIBFT)
	# defining the dependencies
	$(CC) $(CFLAGS) $(OBJS) -o $(NAME) $(LIBFT)
	# it compiles push_swap with the flags and links the object files with the libft.a library

# Build the libft library
$(LIBFT):
	# it makes sure that libft is compiled before building push_swap
	make -C $(LIBFT_DIR)
	# It goes to the libft/ directory and runs the Makefile inside it to generate the libft.a file.

# Clean object files
clean:
	rm -f $(OBJS)
	# it forcefully deletes all the compiled files (.o files)
	make clean -C $(LIBFT_DIR)
	# it cleans the objest files from the libft/ directory

# Clean everything
fclean: clean
	# extending the clean target
	rm -f $(NAME)
	# it forcefully deletes the push_swap executable
	make fclean -C $(LIBFT_DIR)
	# it runs make fclean inside the libft/ directory to remove the libft.a file

# Rebuild the project
re: fclean all
